<!doctype html>
<html lang="en">
<head>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-NVNXJQ5TNR"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-NVNXJQ5TNR');
</script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>etch-n-sketch</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    #infoContainer {
      position: absolute;
      top: 0;
      right: 0;
      padding: 10px;
      margin: 10px;
      background-color: #f0f0f0;
    }

    #colorGraph {
      width: 100vw;
      height: 100vh;
      margin: 5px;
    }
  </style>
</head>
<body onload="OnStart()">

<script>
var count = 0;
var selectorPosition = { x: 0.5, y: 0.5 }; // Initial position

// Simple function to select elements by ID
function getById(id) {
  return document.getElementById(id);
}

// Called when application is started.
function OnStart() {
  // Create info container.
  var infoContainer = document.createElement('div');
  infoContainer.id = 'infoContainer';
  document.body.appendChild(infoContainer);

  // Create color graph.
  var colorGraph = document.createElement('canvas');
  colorGraph.id = 'colorGraph';
  colorGraph.width = window.innerWidth;
  colorGraph.height = window.innerHeight;
  infoContainer.appendChild(colorGraph);

  // Call the function as if it's the cam_OnReady callback.
  cam_OnReady();
}

// Called when camera is ready (simulated for canvas).
function cam_OnReady() {
  // Register event listener for arrow key movements
  document.addEventListener('keydown', handleKeyPress);

  // Periodically update the color graph
  setInterval(updateColorGraph, 0.01);
}

// Update color graph and move color selector
function updateColorGraph() {
  // Move the color selector within the canvas
  moveColorSelector();

  // Draw the color graph and color selector
  drawColorGraph();
}

// Move the color selector based on arrow key presses
function moveColorSelector() {
  const stepSize = 0.001;
  if (arrowKeys.left && selectorPosition.x > 0) {
    selectorPosition.x -= stepSize;
  }
  if (arrowKeys.right && selectorPosition.x < 1) {
    selectorPosition.x += stepSize;
  }
  if (arrowKeys.up && selectorPosition.y > 0) {
    selectorPosition.y -= stepSize;
  }
  if (arrowKeys.down && selectorPosition.y < 1) {
    selectorPosition.y += stepSize;
  }
}

// Arrow key state
var arrowKeys = { left: false, right: false, up: false, down: false };

// Handle arrow key press events
function handleKeyPress(event) {
  switch (event.key) {
    case 'ArrowLeft':
      arrowKeys.left = true;
      break;
    case 'ArrowRight':
      arrowKeys.right = true;
      break;
    case 'ArrowUp':
      arrowKeys.up = true;
      break;
    case 'ArrowDown':
      arrowKeys.down = true;
      break;
  }
}

// Handle arrow key release events
document.addEventListener('keyup', function (event) {
  switch (event.key) {
    case 'ArrowLeft':
      arrowKeys.left = false;
      break;
    case 'ArrowRight':
      arrowKeys.right = false;
      break;
    case 'ArrowUp':
      arrowKeys.up = false;
      break;
    case 'ArrowDown':
      arrowKeys.down = false;
      break;
  }
});

// Draw the color graph and color selector
function drawColorGraph() {
  var colorGraph = getById('colorGraph');
  var ctx = colorGraph.getContext('2d');

  // Clear the canvas
  ctx.clearRect(0, 0, colorGraph.width, colorGraph.height);

  // Draw color bars and labels
  drawColorBars(ctx);

  // Draw the color selector
  drawColorSelector(ctx);
}

// Draw color bars and labels
function drawColorBars(ctx) {
  var colors = [
    { hex: '#FF0000', label: 'Red' },
    { hex: '#00FF00', label: 'Green' },
    { hex: '#0000FF', label: 'Blue' },
    { hex: '#FFFF00', label: 'Yellow' },
    { hex: '#FFFFFF', label: 'White' },
    // Add more colors as needed
  ];

  var barWidth = colorGraph.width / colors.length;
  for (var i = 0; i < colors.length; i++) {
    var x = i * barWidth;
    ctx.fillStyle = colors[i].hex;
    ctx.fillRect(x, 0, barWidth, colorGraph.height);

    ctx.fillStyle = '#FFFFFF'; // White text
    ctx.font = '16px Arial';
    ctx.fillText(colors[i].label, x + 5, colorGraph.height - 5);
  }
}

// Array to store the history of color selector positions
var selectorHistory = [];

// Draw the color selector and its trail
function drawColorSelector(ctx) {
  var selectorX = selectorPosition.x * colorGraph.width;
  var selectorY = selectorPosition.y * colorGraph.height;

  // Save the current position to the history array
  selectorHistory.push({ x: selectorX, y: selectorY });

  ctx.fillStyle = '#000000'; // black color for selector
  ctx.beginPath();
  ctx.arc(selectorX, selectorY, 5, 0, 2 * Math.PI);
  ctx.fill();

  // Draw the trail or mark
  ctx.strokeStyle = '#000000'; // white color for the trail
  ctx.lineWidth = 5;
  ctx.beginPath();
  for (var i = 0; i < selectorHistory.length; i++) {
    ctx.lineTo(selectorHistory[i].x, selectorHistory[i].y);
  }
  ctx.stroke();
}
</script>
</body>
</html>
